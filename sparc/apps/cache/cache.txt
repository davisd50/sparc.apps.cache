Cache
-------

In order to test, we need to simulate command line arguments that specify a
Cache configuration file.  We'll use the config_test.xml file located
in the sparc.apps.cache.test package for our testing purposes.

>>> import os
>>> import sparc.apps.cache.tests
>>> from sparc.apps.cache.cache import getScriptArgumentParser
>>> parser = getScriptArgumentParser()
>>> args = parser.parse_args([
...					os.path.join(os.path.dirname(sparc.apps.cache.tests.__file__), 
... 				'config_test.xml')])

We can now initialize a cache application
>>> from sparc.apps.cache.cache import cache as CacheApp
>>> cache = CacheApp(args)

Get all configured sources and their related polls
>>> sources = cache.config_get_all_sources_with_polls()
>>> sources['CachableSource1']
1
>>> sources['CachableSource3']
0

Create some polled source data structures and verify their contents
>>> polled_sources = cache.create_polled_sources_for_cache('CacheArea1')
>>> type(polled_sources.keys()[0])
<class 'sparc.apps.cache.tests.CachableSource1'>
>>> polled_sources.values()[0]
1

>>> polled_sources = cache.create_polled_sources_for_cache('CacheArea2')
>>> sorted_keys = sorted(polled_sources.keys(), key=lambda source:type(source))
>>> type(sorted_keys[0]), type(sorted_keys[1])
(<class 'sparc.apps.cache.tests.CachableSource1'>, <class 'sparc.apps.cache.tests.CachableSource2'>)
>>> polled_sources[sorted_keys[0]]
1
>>> polled_sources[sorted_keys[1]]
2

>>> polled_sources = cache.create_polled_sources_for_cache('CacheArea3')
>>> sorted_keys = sorted(polled_sources.keys(), key=lambda source:type(source))
>>> type(sorted_keys[0]), type(sorted_keys[1]), type(sorted_keys[2])
(<class 'sparc.apps.cache.tests.CachableSource1'>, <class 'sparc.apps.cache.tests.CachableSource2'>, <class 'sparc.apps.cache.tests.CachableSource3'>)
>>> polled_sources[sorted_keys[0]]
1
>>> polled_sources[sorted_keys[1]]
2
>>> polled_sources[sorted_keys[2]]
0

Create and test the pollers data structure
>>> pollers = cache.create_pollers()
>>> sorted_keys = sorted(pollers.keys(), key=lambda ca:type(ca))
>>> type(sorted_keys[0]), type(sorted_keys[1]), type(sorted_keys[2])
(<class 'sparc.apps.cache.tests.CacheArea1'>, <class 'sparc.apps.cache.tests.CacheArea2'>, <class 'sparc.apps.cache.tests.CacheArea3'>)
>>> len(pollers[sorted_keys[0]])
1
>>> len(pollers[sorted_keys[1]])
2
>>> len(pollers[sorted_keys[2]])
3

Test the application poller
>>> from zope.component import createObject
>>> area = createObject(u'CacheArea1')
>>> area.count
0
>>> source = createObject(u'CachableSource1')
>>> delta = 0
>>> cache.poll(area, source, delta)
>>> area.count
1

Test the application threader
>>> import threading, time
>>> pollers = cache.create_pollers()
>>> for area, poller in pollers.iteritems():
...     for source, poll in poller.iteritems():
...         pollers[area][source] = 0

>>> cache.go(pollers)
>>> sorted_keys = sorted(pollers.keys(), key=lambda ca:type(ca))
>>> sorted_keys[0].count
1
>>> sorted_keys[1].count
2
>>> sorted_keys[2].count
3